@model QLThuvien.ViewModels.PhongViewModel
@using QLThuvien.Models
@using QLThuvien.Models.Dto
@{
    ViewData["Title"] = "Đặt phòng";
}

@section Styles {
    <style>
        /* ... (CSS giữ nguyên như trước) ... */
        body {
            background: linear-gradient(to right, #ece9e6, #ffffff);
            font-family: 'Epunda Slab', serif;
        }

        .container {
            max-width: 1200px;
        }

        .page-header {
            background-color: transparent;
            padding: 2.5rem 1rem;
            margin-bottom: 3rem;
            border-bottom: 2px solid #e0e0e0;
        }

            .page-header h1 {
                font-weight: 700;
                color: #343a40;
            }

        .room-card {
            background-color: #fff;
            border: none;
            border-radius: 12px;
            box-shadow: 0 5px 25px rgba(0, 0, 0, 0.07);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            overflow: hidden;
        }

            .room-card:hover {
                transform: translateY(-8px);
                box-shadow: 0 12px 35px rgba(0, 0, 0, 0.1);
            }

            .room-card .card-header {
                font-weight: 600;
                color: white;
                text-shadow: 1px 1px 3px rgba(0,0,0,0.2);
                padding: 1rem 1.25rem;
                font-size: 1.1rem;
                border-bottom: none;
            }

            .room-card .card-body {
                padding: 1.5rem;
            }

            .room-card .card-title {
                font-weight: 500;
            }

            .room-card .list-group-item {
                border-left: none;
                border-right: none;
                padding: 0.85rem 1.5rem;
                display: flex;
                align-items: center;
            }

                .room-card .list-group-item strong {
                    margin-right: auto;
                }

            .room-card .card-footer {
                background-color: #f8f9fa;
                padding: 1.25rem;
                border-top: 1px solid #f0f0f0;
            }

        .status-trong {
            background: linear-gradient(45deg, #28a745, #218838);
        }

        .status-duocthue {
            background: linear-gradient(45deg, #dc3545, #c82333);
        }

        .status-baotri {
            background: linear-gradient(45deg, #6c757d, #5a6268);
        }

        .badge {
            padding: 0.5em 0.75em;
            font-size: 0.8rem;
        }

        .btn-primary {
            background: linear-gradient(45deg, #007bff, #0056b3);
            border: none;
            transition: transform 0.2s ease;
            font-weight: 600;
        }

            .btn-primary:hover {
                transform: scale(1.05);
            }

            .btn-primary:active {
                transform: scale(0.98);
            }

        .modal-content {
            border-radius: 10px;
            border: none;
        }

        .modal-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }

        .modal-title .text-primary {
            font-weight: 600;
        }

        .schedule-toggle-btn {
            font-size: 0.9rem;
            margin-top: 0.5rem;
            display: inline-block;
        }

        .room-schedule {
            max-height: 200px;
            overflow-y: auto;
            margin-top: 1rem;
            padding: 0.8rem;
            background-color: #f1f3f5;
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .schedule-item {
            display: flex;
            justify-content: space-between;
            padding: 0.4rem 0;
            border-bottom: 1px dashed #ced4da;
        }

            .schedule-item:last-child {
                border-bottom: none;
            }

        .schedule-time {
            font-weight: 500;
            color: #495057;
        }

        .schedule-status {
            font-style: italic;
            color: #dc3545;
        }

        .no-schedule {
            color: #6c757d;
            text-align: center;
            padding: 1rem 0;
        }
    </style>
}

<div class="container my-5">
    <div class="page-header text-center">
        <h1 class="display-5">Chọn Phòng & Đặt Lịch</h1>
        <p class="lead text-muted">Xem danh sách các phòng có sẵn, lịch đặt và chọn thời gian phù hợp với bạn.</p>
    </div>

    @if (Model != null && Model.DanhSachPhong != null && Model.DanhSachPhong.Any())
    {
        @if (Model.CurrentUserId == null)
        {
            <div class="alert alert-info text-center">
                Vui lòng <a asp-area="Identity" asp-page="/Account/Login" class="alert-link">đăng nhập</a> để có thể đặt phòng.
            </div>
        }

        <div class="row g-4">
            @foreach (var phong in Model.DanhSachPhong)
            {
                @if (phong.LoaiPhong != RoomType.CaNhan && phong.LoaiPhong != RoomType.BanCuaSo)
                {
                    @* --- THAY ĐỔI LAYOUT CỘT Ở ĐÂY --- *@
                    @* Sử dụng col-md-6 để hiển thị 2 cột trên màn hình vừa trở lên *@
                    <div class="col-12 col-md-6 d-flex">
                        @* Thay col-lg-4 thành col-md-6 *@
                        @* ------------------------------------ *@
                        <div class="card room-card h-100 w-100 d-flex flex-column">
                            @{
                                string statusClass = ""; string statusText = ""; string statusGradientClass = "";
                                switch (phong.TrangThai)
                                {
                                    case RoomStatus.Trong: statusClass = "bg-success"; statusText = "Còn Trống"; statusGradientClass = "status-trong"; break;
                                    case RoomStatus.DuocThue: statusClass = "bg-danger"; statusText = "Đang được thuê"; statusGradientClass = "status-duocthue"; break;
                                    case RoomStatus.BaoTri: statusClass = "bg-secondary"; statusText = "Đang bảo trì"; statusGradientClass = "status-baotri"; break;
                                }
                                var lichHienTai = Model.LichDatPhong.TryGetValue(phong.Id, out var lich) ? lich : new List<DatPhongDto>();
                            }
                            <div class="card-header @statusGradientClass"> @phong.TenPhong </div>
                            <div class="card-body flex-grow-1">
                                <h5 class="card-title text-primary">@phong.LoaiPhong.ToString()</h5>
                                <p class="card-text text-muted">Nơi lý tưởng cho các buổi học tập và làm việc nhóm hiệu quả.</p>

                                <button class="btn btn-sm btn-outline-secondary schedule-toggle-btn" type="button" data-bs-toggle="collapse" data-bs-target="#schedule-@phong.Id" aria-expanded="false" aria-controls="schedule-@phong.Id">
                                    <i class="fa-regular fa-calendar-days me-1"></i> Xem lịch đặt
                                </button>
                                <div class="collapse room-schedule" id="schedule-@phong.Id">
                                    @if (lichHienTai != null && lichHienTai.Any())
                                    {
                                        @foreach (var lichItem in lichHienTai)
                                        {
                                            if (lichItem != null)
                                            {
                                                var gioBatDauLocal = lichItem.GioBatDau.ToLocalTime();
                                                var gioKetThucLocal = lichItem.GioKetThuc.ToLocalTime();
                                                <div class="schedule-item">
                                                    <span class="schedule-time">@gioBatDauLocal.ToString("dd/MM HH:mm") - @gioKetThucLocal.ToString("HH:mm")</span>
                                                    <span class="schedule-status">Đã đặt</span>
                                                </div>
                                            }
                                        }
                                    }
                                    else
                                    {
                                        <p class="no-schedule">Chưa có lịch đặt nào.</p>
                                    }
                                </div>
                            </div>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item"><strong>Trạng thái:</strong> <span class="badge rounded-pill @statusClass">@statusText</span></li>
                                <li class="list-group-item"><strong>Sức chứa:</strong> <span class="fw-bold text-dark">@phong.SucChua người</span></li>
                                <li class="list-group-item"><strong>Diện tích:</strong> <span class="fw-bold text-dark">@phong.DienTich m²</span></li>
                            </ul>
                            <div class="card-footer text-center">
                                @if (phong.TrangThai == RoomStatus.Trong && Model.CurrentUserId != null)
                                {
                                    <button type="button" class="btn btn-primary px-4 py-2"
                                            data-bs-toggle="modal"
                                            data-bs-target="#bookingModal"
                                            data-room-id="@phong.Id"
                                            data-room-name="@phong.TenPhong">
                                        <i class="fa-regular fa-calendar-check me-2"></i> Đặt lịch ngay
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-secondary" disabled>
                                        @(Model.CurrentUserId == null ? "Đăng nhập để đặt" : "Không có sẵn")
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
    else
    {
        <div class="alert alert-warning text-center"> <h4 class="alert-heading">Rất tiếc!</h4> <p>Hiện tại không có phòng nào trong hệ thống hoặc không thể tải được dữ liệu.</p> </div>
    }
</div>

@* --- MODAL ĐẶT PHÒNG (POPUP) --- *@
<div class="modal fade" id="bookingModal" tabindex="-1" aria-labelledby="bookingModalLabel" aria-hidden="true">
    @* ... (Nội dung Modal giữ nguyên) ... *@
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="bookingModalLabel">Đặt lịch cho phòng: <span id="modalRoomName" class="text-primary"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="bookingForm">
                    <input type="hidden" id="modalRoomId" />
                    <div class="mb-3">
                        <label for="modalStartTime" class="form-label">Thời gian bắt đầu</label>
                        <input type="datetime-local" class="form-control" id="modalStartTime" required>
                    </div>
                    <div class="mb-3">
                        <label for="modalEndTime" class="form-label">Thời gian kết thúc</label>
                        <input type="datetime-local" class="form-control" id="modalEndTime" required>
                    </div>
                    <div id="modal-message" class="mt-3"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" id="confirmBookingBtn">Xác nhận đặt lịch</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        // ... (Code JavaScript xử lý modal và fetch API giữ nguyên như trước) ...
         document.addEventListener('DOMContentLoaded', function () {
            const bookingModalEl = document.getElementById('bookingModal');
            const confirmBookingBtn = document.getElementById('confirmBookingBtn');
            const modalMessage = document.getElementById('modal-message');

            if (!bookingModalEl) {
                 console.error("Dev Error: Element #bookingModal not found!");
                 return;
            }

            bookingModalEl.addEventListener('show.bs.modal', function (event) {
                console.log("Event 'show.bs.modal' triggered.");
                try {
                    const button = event.relatedTarget;
                    if (!button || !button.hasAttribute('data-room-id')) {
                        console.warn('Modal was triggered programmatically or relatedTarget is missing data attributes.');
                        return;
                    }
                    const roomId = button.getAttribute('data-room-id');
                    const roomName = button.getAttribute('data-room-name');
                    const modalRoomIdInput = document.getElementById('modalRoomId');
                    const modalRoomNameSpan = document.getElementById('modalRoomName');

                     if (modalRoomIdInput) modalRoomIdInput.value = roomId; else console.error("Dev Error: Input #modalRoomId not found!");
                     if (modalRoomNameSpan) modalRoomNameSpan.textContent = roomName; else console.error("Dev Error: Span #modalRoomName not found!");

                    if (modalMessage) modalMessage.innerHTML = '';
                    const startTimeInput = document.getElementById('modalStartTime');
                    const endTimeInput = document.getElementById('modalEndTime');
                    if (startTimeInput) startTimeInput.value = '';
                    if (endTimeInput) endTimeInput.value = '';

                } catch (error) {
                    console.error("Error during 'show.bs.modal' event:", error);
                    showMessage('Lỗi khi mở form đặt phòng.', 'danger');
                }
            });

             if (confirmBookingBtn) {
                confirmBookingBtn.addEventListener('click', async function() {
                    console.log("Button '#confirmBookingBtn' clicked.");
                    const roomId = document.getElementById('modalRoomId')?.value;
                    const startTime = document.getElementById('modalStartTime')?.value;
                    const endTime = document.getElementById('modalEndTime')?.value;

                    console.log("Form data:", { roomId, startTime, endTime });

                    let hasError = false;
                    if (!roomId) { showMessage('Lỗi: Không xác định được phòng.', 'danger'); hasError = true; }
                     if (!startTime || !endTime) { showMessage('Vui lòng điền đầy đủ thông tin thời gian.', 'danger'); hasError = true;
                    } else if (new Date(startTime) >= new Date(endTime)) { showMessage('Thời gian kết thúc phải sau thời gian bắt đầu.', 'danger'); hasError = true;
                    } else if (new Date(startTime) < new Date().setMinutes(new Date().getMinutes() - 5)) {
                         showMessage('Thời gian bắt đầu không hợp lệ.', 'danger'); hasError = true;
                    }

                    if(hasError) { console.log("Form data invalid."); return; }

                    const bookingRequest = { phongId: parseInt(roomId), gioBatDau: startTime, gioKetThuc: endTime };
                    console.log("Sending API request:", bookingRequest);

                    confirmBookingBtn.disabled = true;
                    confirmBookingBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang xử lý...';
                    showMessage('', 'info');

                    let response;
                    try {
                        response = await fetch('/api/datphong', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify(bookingRequest) });
                        console.log("API response status:", response.status);

                        if (response.ok) {
                            console.log("Booking successful.");
                            showMessage('Đặt phòng thành công! Trang sẽ được tải lại sau 3 giây.', 'success');
                            setTimeout(() => window.location.reload(), 3000);
                        } else {
                            const responseBody = await response.text();
                            console.error("API Error Response Body:", responseBody);
                            let errorMessage = `Lỗi ${response.status}: ${response.statusText || 'Yêu cầu không thành công.'}`;
                            try {
                                const errorData = JSON.parse(responseBody);
                                errorMessage = errorData.message || errorMessage;
                            } catch (parseError) { console.warn("Could not parse error response as JSON:", parseError); }

                            let alertType = 'danger';
                            if (response.status === 401) { alertType = 'warning'; errorMessage = 'Bạn cần đăng nhập để thực hiện chức năng này. <a href="/Identity/Account/Login">Đăng nhập ngay</a>';
                            } else if (response.status === 409) { errorMessage = errorMessage.includes('Lỗi 409') ? 'Lịch bạn chọn bị trùng hoặc không hợp lệ.' : errorMessage;
                            } else if (response.status === 500) { errorMessage = 'Lỗi máy chủ nội bộ. Vui lòng kiểm tra log backend hoặc liên hệ quản trị viên.'; }

                            showMessage(errorMessage, alertType);
                        }
                    } catch (networkError) {
                        console.error('Network or JavaScript error during API call:', networkError);
                        showMessage('Đã có lỗi kết nối xảy ra. Vui lòng thử lại.', 'danger');
                    } finally {
                        confirmBookingBtn.disabled = false;
                        confirmBookingBtn.textContent = 'Xác nhận đặt lịch';
                        console.log("API handling finished.");
                    }
                });
             } else { console.error("Dev Error: Button #confirmBookingBtn not found!"); }

            function showMessage(message, type) {
                 const alertElement = modalMessage?.querySelector('.alert');
                 if (alertElement) {
                     alertElement.className = `alert alert-${type} alert-dismissible fade show`;
                     alertElement.innerHTML = `${message} <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`;
                 } else if (modalMessage) {
                     if (message) {
                        modalMessage.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">
                                                        ${message}
                                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                                   </div>`;
                     } else { modalMessage.innerHTML = ''; }
                 } else { console.error("Dev Error: Element #modal-message not found."); }
            }
        });
    </script>
}

